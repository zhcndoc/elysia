import{F as e,_ as t,p as n,te as r,u as i,v as a}from"./chunks/runtime-core.esm-bundler.D02XvB7A.js";import{t as o}from"./chunks/Layout.CgtC_9GJ.js";import{n as s,t as c}from"./chunks/schema-standalone.TJMOAIHM.js";const l=JSON.parse(`{"title":"Elysia 1.3 和科学巫术","description":"近乎 0 的开销规范化，配合精确镜像、Bun 系统路由器、独立验证器、减少一半的类型实例化，以及显著降低内存使用和快速启动大型应用的时间","frontmatter":{"title":"Elysia 1.3 和科学巫术","sidebar":false,"editLink":false,"search":false,"head":[["meta",{"property":"og:title","content":"Elysia 1.3 和科学巫术"}],["meta",{"name":"description","content":"近乎 0 的开销规范化，配合精确镜像、Bun 系统路由器、独立验证器、减少一半的类型实例化，以及显著降低内存使用和快速启动大型应用的时间"}],["meta",{"property":"og:description","content":"近乎 0 的开销规范化，配合精确镜像、Bun 系统路由器、独立验证器、减少一半的类型实例化，以及显著降低内存使用和快速启动大型应用的时间"}],["meta",{"property":"og:image","content":"https://elysiajs.com/blog/elysia-13/elysia-13.webp"}],["meta",{"property":"twitter:image","content":"https://elysiajs.com/blog/elysia-13/elysia-13.webp"}]]},"headers":[],"relativePath":"blog/elysia-13.md","filePath":"blog/elysia-13.md","lastUpdated":1758208104000}`);var u=Object.assign({name:`blog/elysia-13.md`},{setup(s){return(s,c)=>(e(),n(`div`,null,[a(o,{title:`Elysia 1.3 和科学巫术`,src:`/blog/elysia-13/elysia-13.webp`,alt:`粉紫色网格渐变背景，上面是 Elysia 1.3 字样，下面是 Scientific Witchery 字样`,author:`saltyaom`,date:`2025 年 5 月 5 日`,shadow:``},{default:r(()=>c[0]||=[i(`p`,null,[t(`以 Mili 的歌曲 `),i(`a`,{href:`https://youtu.be/d-nxW9qBtxQ`,target:`_blank`,rel:`noreferrer`},`Ga1ahad 和科学巫术`),t(` 命名。`)],-1),i(`p`,null,`此版本没有炫目的新功能。`,-1),i(`p`,null,[t(`它是对事物进行改进，以至于我们认为这就是 `),i(`strong`,null,`“魔法”`),t(`。`)],-1),i(`p`,null,`Elysia 1.3 的功能几乎零开销，经过 refinements、修复技术债务和重构内部代码，具有：`,-1),i(`ul`,null,[i(`li`,null,[i(`a`,{href:`#exact-mirror`},`精确镜像`)]),i(`li`,null,[i(`a`,{href:`#bun-system-router`},`Bun 系统路由器`)]),i(`li`,null,[i(`a`,{href:`#standalone-validator`},`独立验证器`)]),i(`li`,null,[i(`a`,{href:`#reduced-type-instantiation`},`减少一半的类型实例化`)]),i(`li`,null,[i(`a`,{href:`#performance-improvement`},`性能改进`)]),i(`li`,null,[i(`a`,{href:`#validation-dx-improvement`},`验证 DX 改进`)]),i(`li`,null,[i(`a`,{href:`#rename-error-to-status`},`将错误重命名为状态`)])],-1),i(`h2`,{id:`精确镜像`,tabindex:`-1`},[t(`精确镜像 `),i(`a`,{class:`header-anchor`,href:`#精确镜像`,"aria-label":`Permalink to “精确镜像”`},`​`)],-1),i(`p`,null,[t(`我们在 Elysia 1.1 中引入了 `),i(`a`,{href:`/patterns/configuration.html#normalize`},`normalize`),t(`，确保数据符合我们所需的形状，并且运行良好。`)],-1),i(`p`,null,`它有助于减少潜在的数据泄露，避免意外的属性，用户非常喜欢它。然而，这也带来了性能成本。`,-1),i(`p`,null,[t(`在后台，它使用 `),i(`code`,null,`TypeBox 的 Value.Clean`),t(` 动态地将数据强制转换为指定的模式。`)],-1),i(`p`,null,`效果很好，但速度不够快。`,-1),i(`p`,null,[t(`由于 TypeBox 不提供与 `),i(`code`,null,`TypeCompiler.Check`),t(` 类似的 `),i(`strong`,null,`编译`),t(` 版本，后者利用了提前知道形状的优势。`)],-1),i(`p`,null,[t(`这就是我们引入 `),i(`a`,{href:`https://github.com/elysiajs/exact-mirror`,target:`_blank`,rel:`noreferrer`},`精确镜像`),t(` 作为替代方案的原因。`)],-1),i(`p`,null,[i(`strong`,null,`精确镜像`),t(` 是 TypeBox 的 `),i(`strong`,null,`Value.Clean`),t(` 的即插即用替代，显著提高了性能，利用了提前编译的优势。`)],-1),i(`h3`,{id:`性能`,tabindex:`-1`},[t(`性能 `),i(`a`,{class:`header-anchor`,href:`#性能`,"aria-label":`Permalink to “性能”`},`​`)],-1),i(`p`,null,[t(`对于没有数组的小对象，我们测量的速度 `),i(`strong`,null,`最快可达 ~500倍`),t(`。 `),i(`img`,{src:`/blog/elysia-13/exact-mirror-small.webp`,alt:`在小数据上运行的精确镜像，其速度比 TypeBox Value.Clean 快 582.52 倍`,"data-zoomable":`true`})],-1),i(`blockquote`,null,[i(`p`,null,`在小数据上运行的精确镜像`)],-1),i(`p`,null,[t(`对于中等和大型对象，我们测量的速度 `),i(`strong`,null,`最快可达 ~30倍`),t(`。 `),i(`img`,{src:`/blog/elysia-13/exact-mirror-large.webp`,alt:`在中大型数据上运行的精确镜像，结果依次为 29.46 倍和 31.6 倍`,"data-zoomable":`true`})],-1),i(`blockquote`,null,[i(`p`,null,`在中大型数据上运行的精确镜像`)],-1),i(`h3`,{id:`对-elysia-的意义`,tabindex:`-1`},[t(`对 Elysia 的意义 `),i(`a`,{class:`header-anchor`,href:`#对-elysia-的意义`,"aria-label":`Permalink to “对 Elysia 的意义”`},`​`)],-1),i(`p`,null,`从 Elysia 1.3 开始，精确镜像是默认的规范化策略，取代了 TypeBox。`,-1),i(`p`,null,[t(`通过升级到 Elysia 1.3，您可以期待显著的性能提升 `),i(`strong`,null,`没有任何代码更改`),t(`。`)],-1),i(`p`,null,[t(`以下是 Elysia 1.2 的吞吐量。 `),i(`img`,{src:`/blog/elysia-13/normalize-1.2.webp`,alt:`未开启规范化的 Elysia，吞吐量为 49k req/sec`,"data-zoomable":`true`})],-1),i(`blockquote`,null,[i(`p`,null,`未开启规范化的 Elysia`)],-1),i(`p`,null,[t(`而以下是同一段代码在 Elysia 1.3 中的结果 `),i(`img`,{src:`/blog/elysia-13/normalize-1.3.webp`,alt:`开启规范化的 Elysia，吞吐量为 77k req/sec`,"data-zoomable":`true`})],-1),i(`blockquote`,null,[i(`p`,null,`开启规范化的 Elysia`)],-1),i(`p`,null,[t(`我们在使用 `),i(`strong`,null,`单个`),t(` 模式的情况下测得吞吐量最高可达 ~1.5倍。`)],-1),i(`p`,null,`这意味着如果您使用多个模式，您将在性能上看到更明显的提升。`,-1),i(`p`,null,`与没有模式的相同代码相比，性能差异小于 2%。`,-1),i(`p`,null,[i(`img`,{src:`/blog/elysia-13/no-validation.webp`,alt:`未验证的 Elysia 的运行结果为 79k req/sec`,"data-zoomable":`true`})],-1),i(`blockquote`,null,[i(`p`,null,`未验证的 Elysia 的运行结果`)],-1),i(`p`,null,`这非常重要。`,-1),i(`p`,null,`之前，您必须在安全性和性能之间做出选择，但随着我们缩小了使用验证和不使用验证之间的性能差距，现在您不必担心这个问题。`,-1),i(`p`,null,`现在，我们将验证开销从大量下降到几乎接近零，而无需您进行任何更改。`,-1),i(`p`,null,`它就像魔法一样运行。`,-1),i(`p`,null,`但是，如果您希望使用 TypeBox 或完全禁用规范化，您可以像配置其他设置一样，通过构造函数进行设定：`,-1),i(`div`,{class:`language-ts`},[i(`button`,{title:`Copy Code`,class:`copy`}),i(`span`,{class:`lang`},`ts`),i(`pre`,{class:`shiki shiki-themes github-light github-dark`,style:{"--shiki-light":`#24292e`,"--shiki-dark":`#e1e4e8`,"--shiki-light-bg":`#fff`,"--shiki-dark-bg":`#24292e`},tabindex:`0`,dir:`ltr`},[i(`code`,null,[i(`span`,{class:`line`},[i(`span`,{style:{"--shiki-light":`#D73A49`,"--shiki-dark":`#F97583`}},`import`),i(`span`,{style:{"--shiki-light":`#24292E`,"--shiki-dark":`#E1E4E8`}},` { Elysia } `),i(`span`,{style:{"--shiki-light":`#D73A49`,"--shiki-dark":`#F97583`}},`from`),i(`span`,{style:{"--shiki-light":`#032F62`,"--shiki-dark":`#9ECBFF`}},` 'elysia'`)]),t(`
`),i(`span`,{class:`line`}),t(`
`),i(`span`,{class:`line`},[i(`span`,{style:{"--shiki-light":`#D73A49`,"--shiki-dark":`#F97583`}},`new`),i(`span`,{style:{"--shiki-light":`#6F42C1`,"--shiki-dark":`#B392F0`}},` Elysia`),i(`span`,{style:{"--shiki-light":`#24292E`,"--shiki-dark":`#E1E4E8`}},`({`)]),t(`
`),i(`span`,{class:`line`},[i(`span`,{style:{"--shiki-light":`#24292E`,"--shiki-dark":`#E1E4E8`}},`    normalize: `),i(`span`,{style:{"--shiki-light":`#032F62`,"--shiki-dark":`#9ECBFF`}},`'typebox'`),i(`span`,{style:{"--shiki-light":`#6A737D`,"--shiki-dark":`#6A737D`}},` // 使用 TypeBox`)]),t(`
`),i(`span`,{class:`line`},[i(`span`,{style:{"--shiki-light":`#24292E`,"--shiki-dark":`#E1E4E8`}},`})`)])])])],-1),i(`p`,null,[t(`您可以访问 `),i(`a`,{href:`https://github.com/elysiajs/exact-mirror`,target:`_blank`,rel:`noreferrer`},`GitHub上的精确镜像`),t(` 自行尝试基准测试。`)],-1),i(`h2`,{id:`系统路由器`,tabindex:`-1`},[t(`系统路由器 `),i(`a`,{class:`header-anchor`,href:`#系统路由器`,"aria-label":`Permalink to “系统路由器”`},`​`)],-1),i(`p`,null,`我们在 Elysia 中从未遇到过路由器性能问题。`,-1),i(`p`,null,`它性能优异，我们尽可能进行了超优化。`,-1),i(`p`,null,`我们将其推至 JavaScript 在实际情况下能够提供的近乎极限。`,-1),i(`h3`,{id:`bun-路由器`,tabindex:`-1`},[t(`Bun 路由器 `),i(`a`,{class:`header-anchor`,href:`#bun-路由器`,"aria-label":`Permalink to “Bun 路由器”`},`​`)],-1),i(`p`,null,`然而，Bun 1.2.3 提供了一个内置的路由解决方案（可能是在本地代码中）。`,-1),i(`p`,null,[t(`尽管对于静态路由，我们没有看到太多性能提升，但我们发现 `),i(`strong`,null,`动态路由性能提高了 2-5%`),t(` ，而没有进行任何代码更改。`)],-1),i(`p`,null,`从 Elysia 1.3 开始，我们提供了一种双路由策略，将 Bun 的本地路由器和 Elysia 的路由器结合使用。`,-1),i(`p`,null,`Elysia 将尽可能使用 Bun 路由器，若不成功则回退到 Elysia 的路由器。`,-1),i(`h3`,{id:`适配器`,tabindex:`-1`},[t(`适配器 `),i(`a`,{class:`header-anchor`,href:`#适配器`,"aria-label":`Permalink to “适配器”`},`​`)],-1),i(`p`,null,[t(`为了实现这一点，我们必须重写我们的内部编译代码，以支持来自 `),i(`strong`,null,`适配器`),t(` 的自定义路由器。`)],-1),i(`p`,null,`这意味着现在可以将自定义路由器与 Elysia 自有路由器一起使用。`,-1),i(`p`,null,[t(`这在某些环境中为性能提升开辟了机会，例如：使用内置的 `),i(`code`,null,`uWebSocket.js 路由器`),t(`，该路由器具有原生实现的路由功能。`)],-1),i(`h2`,{id:`独立验证器`,tabindex:`-1`},[t(`独立验证器 `),i(`a`,{class:`header-anchor`,href:`#独立验证器`,"aria-label":`Permalink to “独立验证器”`},`​`)],-1),i(`p`,null,[t(`在 Elysia 中，我们可以定义一个模式并通过 `),i(`code`,null,`guard`),t(` 将其应用于多个路由。`)],-1),i(`p`,null,`然后，我们可以通过在路由处理程序中提供一个模式来覆盖公共模式，有时看起来像这样：`,-1),i(`p`,null,[i(`img`,{src:`/blog/elysia-13/schema-override.webp`,alt:`Elysia 运行具有默认覆盖保护的模式，显示模式被覆盖`,"data-zoomable":`true`})],-1),i(`blockquote`,null,[i(`p`,null,`Elysia 运行具有默认覆盖保护`)],-1),i(`p`,null,[t(`但有时我们 `),i(`strong`,null,`不想覆盖`),t(` 一个模式。`)],-1),i(`p`,null,`相反，我们希望它两者兼具，允许我们组合模式而不是覆盖它们。`,-1),i(`p`,null,`从 Elysia 1.3 开始，我们可以做到这一点。`,-1),i(`p`,null,[t(`我们现在可以告诉 Elysia 不要覆盖它，而是将其视为其自身，通过提供一个模式作为 `),i(`strong`,null,`独立`),t(`。`)],-1),i(`div`,{class:`language-ts`},[i(`button`,{title:`Copy Code`,class:`copy`}),i(`span`,{class:`lang`},`ts`),i(`pre`,{class:`shiki shiki-themes github-light github-dark`,style:{"--shiki-light":`#24292e`,"--shiki-dark":`#e1e4e8`,"--shiki-light-bg":`#fff`,"--shiki-dark-bg":`#24292e`},tabindex:`0`,dir:`ltr`},[i(`code`,null,[i(`span`,{class:`line`},[i(`span`,{style:{"--shiki-light":`#D73A49`,"--shiki-dark":`#F97583`}},`import`),i(`span`,{style:{"--shiki-light":`#24292E`,"--shiki-dark":`#E1E4E8`}},` { Elysia } `),i(`span`,{style:{"--shiki-light":`#D73A49`,"--shiki-dark":`#F97583`}},`from`),i(`span`,{style:{"--shiki-light":`#032F62`,"--shiki-dark":`#9ECBFF`}},` 'elysia'`)]),t(`
`),i(`span`,{class:`line`}),t(`
`),i(`span`,{class:`line`},[i(`span`,{style:{"--shiki-light":`#D73A49`,"--shiki-dark":`#F97583`}},`new`),i(`span`,{style:{"--shiki-light":`#6F42C1`,"--shiki-dark":`#B392F0`}},` Elysia`),i(`span`,{style:{"--shiki-light":`#24292E`,"--shiki-dark":`#E1E4E8`}},`()`)]),t(`
`),i(`span`,{class:`line`},[i(`span`,{style:{"--shiki-light":`#24292E`,"--shiki-dark":`#E1E4E8`}},`    .`),i(`span`,{style:{"--shiki-light":`#6F42C1`,"--shiki-dark":`#B392F0`}},`guard`),i(`span`,{style:{"--shiki-light":`#24292E`,"--shiki-dark":`#E1E4E8`}},`({`)]),t(`
`),i(`span`,{class:`line`},[i(`span`,{style:{"--shiki-light":`#24292E`,"--shiki-dark":`#E1E4E8`}},`        schema: `),i(`span`,{style:{"--shiki-light":`#032F62`,"--shiki-dark":`#9ECBFF`}},`'standalone'`),i(`span`,{style:{"--shiki-light":`#24292E`,"--shiki-dark":`#E1E4E8`}},`, `),i(`span`,{style:{"--shiki-light":`#6A737D`,"--shiki-dark":`#6A737D`}},`// [!代码 ++]`)]),t(`
`),i(`span`,{class:`line`},[i(`span`,{style:{"--shiki-light":`#24292E`,"--shiki-dark":`#E1E4E8`}},`        response: t.`),i(`span`,{style:{"--shiki-light":`#6F42C1`,"--shiki-dark":`#B392F0`}},`Object`),i(`span`,{style:{"--shiki-light":`#24292E`,"--shiki-dark":`#E1E4E8`}},`({`)]),t(`
`),i(`span`,{class:`line`},[i(`span`,{style:{"--shiki-light":`#24292E`,"--shiki-dark":`#E1E4E8`}},`            title: t.`),i(`span`,{style:{"--shiki-light":`#6F42C1`,"--shiki-dark":`#B392F0`}},`String`),i(`span`,{style:{"--shiki-light":`#24292E`,"--shiki-dark":`#E1E4E8`}},`()`)]),t(`
`),i(`span`,{class:`line`},[i(`span`,{style:{"--shiki-light":`#24292E`,"--shiki-dark":`#E1E4E8`}},`        })`)]),t(`
`),i(`span`,{class:`line`},[i(`span`,{style:{"--shiki-light":`#24292E`,"--shiki-dark":`#E1E4E8`}},`    })`)])])])],-1),i(`p`,null,`结果，我们得到了类似于将本地和全局模式合并的结果。`,-1),i(`p`,null,[i(`img`,{src:`/blog/elysia-13/schema-standalone.webp`,alt:`Elysia 运行独立模式，合并多个保护`,"data-zoomable":`true`})],-1),i(`blockquote`,null,[i(`p`,null,`Elysia 运行独立模式，合并多个保护`)],-1),i(`h2`,{id:`减少类型实例化`,tabindex:`-1`},[t(`减少类型实例化 `),i(`a`,{class:`header-anchor`,href:`#减少类型实例化`,"aria-label":`Permalink to “减少类型实例化”`},`​`)],-1),i(`p`,null,`Elysia 的类型推断已经非常快。`,-1),i(`p`,null,`我们对类型推断的优化非常有信心，它的速度比大多数使用类 Express 语法的框架还要快。`,-1),i(`p`,null,`然而，我们的用户在规模很大、具有多个路由和复杂的类型推断的情况下，面临着挑战。`,-1),i(`p`,null,[t(`我们设法在大多数情况下 `),i(`strong`,null,`将类型实例化减少了一半`),t(`，测量了推断速度提高了高达 60%。`)],-1),i(`p`,null,[i(`img`,{src:`/blog/elysia-13/type-instantiation.webp`,alt:`类型实例化从 109k 减少到 52k`,"data-zoomable":`true`})],-1),i(`blockquote`,null,[i(`p`,null,`类型实例化从 109k 减少到 52k`)],-1),i(`p`,null,[t(`我们还改变了 `),i(`code`,null,`decorate`),t(` 的默认行为，而不是递归遍历每个对象和属性进行交集。`)],-1),i(`p`,null,[t(`这应该解决使用重型对象/类的用户的问题，例如 `),i(`code`,null,`PrismaClient`),t(`。`)],-1),i(`p`,null,`因此，结果应该会带来更快速的 IDE 自动补全、建议、类型检查和 Eden Treaty。`,-1),i(`h2`,{id:`性能改进`,tabindex:`-1`},[t(`性能改进 `),i(`a`,{class:`header-anchor`,href:`#性能改进`,"aria-label":`Permalink to “性能改进”`},`​`)],-1),i(`p`,null,`我们重构和优化了许多内部代码，从而实现了显著的改进。`,-1),i(`h3`,{id:`路由注册`,tabindex:`-1`},[t(`路由注册 `),i(`a`,{class:`header-anchor`,href:`#路由注册`,"aria-label":`Permalink to “路由注册”`},`​`)],-1),i(`p`,null,`我们重构了存储路由信息的方式，并重用对象引用，而不是克隆/创建新的引用。`,-1),i(`p`,null,`我们观察到以下改进：`,-1),i(`ul`,null,[i(`li`,null,`内存使用减少到 ~5.6倍`),i(`li`,null,`路由注册时间提高到 ~2.7倍`)],-1),i(`p`,null,[i(`img`,{src:`/blog/elysia-13/routes.webp`,alt:`Elysia 1.2（左）与 1.3（右）之间的路由注册比较`,"data-zoomable":`true`})],-1),i(`blockquote`,null,[i(`p`,null,`Elysia 1.2（左）与 1.3（右）之间的路由注册比较`)],-1),i(`p`,null,`这些优化应该能在中大型应用中显现出真正的成果，因为它随服务器的路由数量而扩展。`,-1),i(`h3`,{id:`sucrose`,tabindex:`-1`},[t(`Sucrose `),i(`a`,{class:`header-anchor`,href:`#sucrose`,"aria-label":`Permalink to “Sucrose”`},`​`)],-1),i(`p`,null,`我们实现了 Sucrose 缓存，以减少不必要的重新计算，并在为非内联事件编译每个路由时重用已编译的路由。`,-1),i(`p`,null,[i(`img`,{src:`/blog/elysia-13/sucrose.webp`,alt:`Elysia 1.2（左）和 1.3（右）之间的 Sucrose 性能比较`,"data-zoomable":`true`})],-1),i(`blockquote`,null,[i(`p`,null,`Elysia 1.2（左）和 1.3（右）之间的 Sucrose 性能比较`)],-1),i(`p`,null,`Sucrose 将每个事件转换为校验和号码并将其存储为缓存。它使用很少的内存，并将在服务器启动后清理。`,-1),i(`p`,null,`这一改进应该有助于重用全局/作用域事件的每路由的启动时间。`,-1),i(`h3`,{id:`实例`,tabindex:`-1`},[t(`实例 `),i(`a`,{class:`header-anchor`,href:`#实例`,"aria-label":`Permalink to “实例”`},`​`)],-1),i(`p`,null,`在创建多个实例并将其作为插件应用时，我们看到显著的改进。`,-1),i(`ul`,null,[i(`li`,null,`内存使用减少了 ~10倍`),i(`li`,null,`插件创建速度提高了 ~3倍`)],-1),i(`p`,null,[i(`img`,{src:`/blog/elysia-13/instance.webp`,alt:`Elysia 1.2（左）与 1.3（右）之间的实例比较`,"data-zoomable":`true`})],-1),i(`blockquote`,null,[i(`p`,null,`Elysia 1.2（左）与 1.3（右）之间的实例比较`)],-1),i(`p`,null,`这些优化将在升级到 Elysia 1.3 时自动应用。然而，这些性能优化对于小型应用可能不会特别显著。`,-1),i(`p`,null,`因为 Serving 一个简单的 Bun 服务器的固定成本约为 10-15MB。这些优化更像是减少现有开销，并有助于改善启动时间。`,-1),i(`h3`,{id:`通用更快性能`,tabindex:`-1`},[t(`通用更快性能 `),i(`a`,{class:`header-anchor`,href:`#通用更快性能`,"aria-label":`Permalink to “通用更快性能”`},`​`)],-1),i(`p`,null,`通过各种微优化、修复技术债务和消除未使用的编译指令。`,-1),i(`p`,null,`我们看到 Elysia 请求处理速度有所改善。在某些情况下提高了高达 40%。`,-1),i(`p`,null,[i(`img`,{src:`/blog/elysia-13/handle.webp`,alt:`Elysia.handle 在 Elysia 1.2 和 1.3 之间的比较`,"data-zoomable":`true`})],-1),i(`blockquote`,null,[i(`p`,null,`Elysia.handle 在 Elysia 1.2 和 1.3 之间的比较`)],-1),i(`h2`,{id:`验证-dx-改进`,tabindex:`-1`},[t(`验证 DX 改进 `),i(`a`,{class:`header-anchor`,href:`#验证-dx-改进`,"aria-label":`Permalink to “验证 DX 改进”`},`​`)],-1),i(`p`,null,[t(`我们希望 Elysia 的验证能够 `),i(`strong`,null,`即刻生效`),t(`。`)],-1),i(`p`,null,`只需告诉它您想要什么，它就能满足。这是 Elysia 最有价值的方面之一。`,-1),i(`p`,null,`在这次更新中，我们改善了一些我们一直欠缺的领域。`,-1),i(`h3`,{id:`编码模式`,tabindex:`-1`},[t(`编码模式 `),i(`a`,{class:`header-anchor`,href:`#编码模式`,"aria-label":`Permalink to “编码模式”`},`​`)],-1),i(`p`,null,[t(`我们已将 `),i(`a`,{href:`/patterns/configuration.html#encodeschema`},`encodeSchema`),t(` 从 `),i(`code`,null,`实验性`),t(` 移出，并默认启用。`)],-1),i(`p`,null,[t(`这使我们能够使用 `),i(`a`,{href:`https://github.com/sinclairzx81/typebox?tab=readme-ov-file#types-transform`,target:`_blank`,rel:`noreferrer`},`t.Transform`),t(` 应用自定义响应映射，以返回给最终用户。`)],-1),i(`p`,null,[i(`img`,{src:`/blog/elysia-13/encode-schema.webp`,alt:`使用 t.Transform 进行值拦截`,"data-zoomable":`true`})],-1),i(`blockquote`,null,[i(`p`,null,`使用 t.Transform 进行值拦截`)],-1),i(`p`,null,`这段示例代码将拦截响应，将“hi”替换为“intercepted”。`,-1),i(`h3`,{id:`清理`,tabindex:`-1`},[t(`清理 `),i(`a`,{class:`header-anchor`,href:`#清理`,"aria-label":`Permalink to “清理”`},`​`)],-1),i(`p`,null,[t(`为了防止 SQL 注入和 XSS，并确保字符串输入/输出安全，我们引入了 `),i(`a`,{href:`/patterns/configuration.html#sanitize`},`sanitize`),t(` 选项。`)],-1),i(`p`,null,[t(`它接受一个函数或一组函数，拦截每个 `),i(`code`,null,`t.String`),t(`，并将其转换为新值。`)],-1),i(`p`,null,[i(`img`,{src:`/blog/elysia-13/sanitize.webp`,alt:`使用 sanitize 和 Bun.escapeHTML`,"data-zoomable":`true`})],-1),i(`blockquote`,null,[i(`p`,null,`使用 sanitize 和 Bun.escapeHTML`)],-1),i(`p`,null,[t(`在这个例子中，我们使用 `),i(`strong`,null,`Bun.escapeHTML`),t(` 并将每个“dorothy”替换为“doro”。`)],-1),i(`p`,null,[t(`由于 `),i(`code`,null,`sanitize`),t(` 将全局应用于每个模式，它必须在根实例上应用。`)],-1),i(`p`,null,`这大大减少了手动安全验证和转换每个字符串字段的样板代码。`,-1),i(`h3`,{id:`表单`,tabindex:`-1`},[t(`表单 `),i(`a`,{class:`header-anchor`,href:`#表单`,"aria-label":`Permalink to “表单”`},`​`)],-1),i(`p`,null,[t(`在 Elysia 的早期版本中，无法使用 `),i(`a`,{href:`/essential/handler.html#formdata`},`form`),t(` 和 `),i(`code`,null,`t.Object`),t(` 在编译时进行类型检查 FormData 响应。`)],-1),i(`p`,null,[t(`我们现在引入了一个新的 `),i(`a`,{href:`/patterns/type.html#form`},`t.Form`),t(` 类型来解决这个问题。`)],-1),i(`p`,null,[i(`img`,{src:`/blog/elysia-13/form.webp`,alt:`使用 t.Form 验证 FormData`,"data-zoomable":`true`})],-1),i(`blockquote`,null,[i(`p`,null,`使用 t.Form 验证 FormData`)],-1),i(`p`,null,[t(`要迁移到表单类型检查，只需在响应模式中将 `),i(`code`,null,`t.Object`),t(` 替换为 `),i(`code`,null,`t.Form`),t(`。`)],-1),i(`h3`,{id:`文件类型`,tabindex:`-1`},[t(`文件类型 `),i(`a`,{class:`header-anchor`,href:`#文件类型`,"aria-label":`Permalink to “文件类型”`},`​`)],-1),i(`p`,null,[t(`Elysia 现在使用 `),i(`a`,{href:`https://github.com/sindresorhus/file-type`,target:`_blank`,rel:`noreferrer`},`file-type`),t(` 验证文件类型。`)],-1),i(`p`,null,[i(`img`,{src:`/blog/elysia-13/file-type.webp`,alt:`使用 t.File 定义文件类型`,"data-zoomable":`true`})],-1),i(`blockquote`,null,[i(`p`,null,`使用 t.File 定义文件类型`)],-1),i(`p`,null,[t(`一旦指定了 `),i(`code`,null,`type`),t(`，Elysia 将通过检查魔术数字自动检测文件类型。`)],-1),i(`p`,null,[t(`然而，它也被列为 `),i(`strong`,null,`peerDependencies`),t(`，并且不会随 Elysia 默认安装，以减少不需要此功能的用户的包大小。`)],-1),i(`p`,null,`如果您依赖文件类型验证以提高安全性，建议您更新到 Elysia 1.3。`,-1),i(`h3`,{id:`elysia-ref`,tabindex:`-1`},[t(`Elysia.Ref `),i(`a`,{class:`header-anchor`,href:`#elysia-ref`,"aria-label":`Permalink to “Elysia.Ref”`},`​`)],-1),i(`p`,null,[t(`我们可以通过使用 `),i(`code`,null,`Elysia.model`),t(` 创建引用模型，并通过名称引用它。`)],-1),i(`p`,null,`然而，有时我们需要在模式内部引用它。`,-1),i(`p`,null,[t(`我们现在可以通过使用 `),i(`code`,null,`Elysia.Ref`),t(` 来实现这一点，并自动完成引用模型。`)],-1),i(`p`,null,[i(`img`,{src:`/blog/elysia-13/elysia-ref.webp`,alt:`使用 Elysia.Ref 引用模型`,"data-zoomable":`true`})],-1),i(`blockquote`,null,[i(`p`,null,`使用 Elysia.Ref 引用模型`)],-1),i(`p`,null,[t(`您也可以使用 `),i(`code`,null,`t.Ref`),t(` 来引用模型，但它不会提供自动完成。`)],-1),i(`h3`,{id:`不验证`,tabindex:`-1`},[t(`不验证 `),i(`a`,{class:`header-anchor`,href:`#不验证`,"aria-label":`Permalink to “不验证”`},`​`)],-1),i(`p`,null,`我们收到了许多反馈，一些用户希望快速原型化他们的 API，或者有时在强制执行验证时遇到问题。`,-1),i(`p`,null,[t(`在 Elysia 1.3 中，我们引入了 `),i(`code`,null,`t.NoValidate`),t(` 以跳过验证。`)],-1),i(`p`,null,[i(`img`,{src:`/blog/elysia-13/no-validate.webp`,alt:`使用 t.NoValidate 告诉 Elysia 跳过验证`,"data-zoomable":`true`})],-1),i(`blockquote`,null,[i(`p`,null,`使用 t.NoValidate 告诉 Elysia 跳过验证`)],-1),i(`p`,null,`这将告知 Elysia 跳过运行时验证，但仍然提供 TypeScript 类型检查和 OpenAPI 架构以用于 API 文档。`,-1),i(`h2`,{id:`状态`,tabindex:`-1`},[t(`状态 `),i(`a`,{class:`header-anchor`,href:`#状态`,"aria-label":`Permalink to “状态”`},`​`)],-1),i(`p`,null,[t(`我们收到了关于 `),i(`code`,null,`error`),t(` 命名的大量反馈。`)],-1),i(`p`,null,[t(`从 Elysia 1.3 开始，我们决定弃用 `),i(`code`,null,`error`),t(`，并建议使用 `),i(`code`,null,`status`),t(` 代替。`)],-1),i(`p`,null,[i(`img`,{src:`/blog/elysia-13/status.webp`,alt:`IDE 显示 error 被弃用并重命名为 status`,"data-zoomable":`true`})],-1),i(`blockquote`,null,[i(`p`,null,`IDE 显示 error 被弃用并重命名为 status`)],-1),i(`p`,null,[i(`code`,null,`error`),t(` 函数将按前一个版本的方式运作，无需立即更改。`)],-1),i(`p`,null,[t(`但是，我们建议重构为 `),i(`code`,null,`status`),t(`，因为我们将在接下来的 6 个月内支持 `),i(`code`,null,`error`),t(` 函数，直到大约 Elysia 1.4 或 1.5。`)],-1),i(`p`,null,[t(`要迁移，只需将 `),i(`code`,null,`error`),t(` 重命名为 `),i(`code`,null,`status`),t(`。`)],-1),i(`h2`,{id:`index-从-treaty-中移除`,tabindex:`-1`},[t(`".index" 从 Treaty 中移除 `),i(`a`,{class:`header-anchor`,href:`#index-从-treaty-中移除`,"aria-label":`Permalink to “".index" 从 Treaty 中移除”`},`​`)],-1),i(`p`,null,[t(`之前，您必须添加 `),i(`code`,null,`(treaty).index`),t(` 来处理以 `),i(`strong`,null,`/`),t(` 结尾的路径。`)],-1),i(`p`,null,[t(`从 Elysia 1.3 开始，我们决定放弃使用 `),i(`code`,null,`.index`),t(`，可以简单地绕过它，直接调用方法。`)],-1),i(`p`,null,[i(`img`,{src:`/blog/elysia-13/treaty-index.webp`,alt:`Eden Treaty 显示没有使用 .index`,"data-zoomable":`true`})],-1),i(`blockquote`,null,[i(`p`,null,`Eden Treaty 显示没有使用 .index`)],-1),i(`p`,null,[t(`这是一个 `),i(`strong`,null,`破坏性更改`),t(`，但迁移只需最低努力。`)],-1),i(`p`,null,[t(`要迁移，只需从您的代码库中删除 `),i(`code`,null,`.index`),t(`。使用 IDE 搜索进行批量更改，将 `),i(`code`,null,`.index`),t(` 匹配并删除，这应该是一个简单的更改。`)],-1),i(`h2`,{id:`突出变化`,tabindex:`-1`},[t(`突出变化 `),i(`a`,{class:`header-anchor`,href:`#突出变化`,"aria-label":`Permalink to “突出变化”`},`​`)],-1),i(`p`,null,`以下是一些来自变更日志的显著变化。`,-1),i(`h3`,{id:`改进`,tabindex:`-1`},[t(`改进 `),i(`a`,{class:`header-anchor`,href:`#改进`,"aria-label":`Permalink to “改进”`},`​`)],-1),i(`ul`,null,[i(`li`,null,[i(`code`,null,`encodeSchema`),t(` 现在稳定，并默认启用`)]),i(`li`,null,`优化类型`),i(`li`,null,`在使用 Encode 时减少冗余类型检查`),i(`li`,null,`优化 isAsync`),i(`li`,null,`默认解包 Definition['typebox'] 以防止不必要的 UnwrapTypeModule 调用`),i(`li`,null,`Elysia.form 现在可以进行类型检查`),i(`li`,null,`重构类型系统`),i(`li`,null,[t(`将 `),i(`code`,null,`_types`),t(` 重构为 `),i(`code`,null,`~Types`)]),i(`li`,null,`使用 aot 编译检查自定义 Elysia 类型，例如 Numeric`),i(`li`,null,[t(`重构 `),i(`code`,null,`app.router.static`),t(`，并将静态路由器代码生成移至编译阶段`)]),i(`li`,null,[t(`优化 `),i(`code`,null,`add`),t(`、`),i(`code`,null,`_use`),t(` 及一些实用函数的内存使用`)]),i(`li`,null,`改善多个路由的启动时间`),i(`li`,null,`动态创建 cookie 验证器，以便在编译过程中按需使用`),i(`li`,null,`减少对象克隆`),i(`li`,null,`优化用于查找内容类型头分隔符的起始索引`),i(`li`,null,`Promise 现在可以是静态响应`),i(`li`,null,[i(`code`,null,`ParseError`),t(` 现在保留堆栈跟踪`)]),i(`li`,null,[t(`重构 `),i(`code`,null,`parseQuery`),t(` 和 `),i(`code`,null,`parseQueryFromURL`)]),i(`li`,null,[t(`向 `),i(`code`,null,`mount`),t(` 添加 `),i(`code`,null,`config`),t(` 选项`)]),i(`li`,null,`在挂载异步模块后自动重新编译`),i(`li`,null,`支持宏，当钩子具有函数时`),i(`li`,null,`支持在 ws 上解析宏`),i(`li`,null,[i(`a`,{href:`https://github.com/elysiajs/elysia/pull/1146`,target:`_blank`,rel:`noreferrer`},`#1146`),t(` 添加支持从处理程序返回 Web API 的文件`)]),i(`li`,null,[i(`a`,{href:`https://github.com/elysiajs/elysia/pull/1165`,target:`_blank`,rel:`noreferrer`},`#1165`),t(` 在响应架构验证中跳过非数字状态码`)]),i(`li`,null,[i(`a`,{href:`https://github.com/elysiajs/elysia/issues/1177`,target:`_blank`,rel:`noreferrer`},`#1177`),t(` 当抛出错误时 cookie 不会签名`)])],-1),i(`h3`,{id:`修复错误`,tabindex:`-1`},[t(`修复错误 `),i(`a`,{class:`header-anchor`,href:`#修复错误`,"aria-label":`Permalink to “修复错误”`},`​`)],-1),i(`ul`,null,[i(`li`,null,[t(`从 `),i(`code`,null,`onError`),t(` 返回的 `),i(`code`,null,`Response`),t(` 使用八位字节流`)]),i(`li`,null,[t(`使用 `),i(`code`,null,`mergeObjectArray`),t(` 时意外的内存分配`)]),i(`li`,null,`处理日期查询的空格`)],-1),i(`h3`,{id:`更改`,tabindex:`-1`},[t(`更改 `),i(`a`,{class:`header-anchor`,href:`#更改`,"aria-label":`Permalink to “更改”`},`​`)],-1),i(`ul`,null,[i(`li`,null,[t(`当 `),i(`code`,null,`maybeStream`),t(` 为 true 时，仅向 mapResponse 提供 `),i(`code`,null,`c.request`)]),i(`li`,null,[t(`使用普通对象作为 `),i(`code`,null,`routeTree`),t(`，而不是 `),i(`code`,null,`Map`)]),i(`li`,null,[t(`移除 `),i(`code`,null,`compressHistoryHook`),t(` 和 `),i(`code`,null,`decompressHistoryHook`)]),i(`li`,null,[t(`webstandard 处理程序现在在未在 Bun 上时返回 `),i(`code`,null,`text/plain`)]),i(`li`,null,[t(`除非明确指定，否则为 `),i(`code`,null,`decorate`),t(` 使用非常量值`)]),i(`li`,null,[i(`code`,null,`Elysia.mount`),t(` 现在默认设置 `),i(`code`,null,`detail.hide = true`)])],-1),i(`h3`,{id:`破坏性更改`,tabindex:`-1`},[t(`破坏性更改 `),i(`a`,{class:`header-anchor`,href:`#破坏性更改`,"aria-label":`Permalink to “破坏性更改”`},`​`)],-1),i(`ul`,null,[i(`li`,null,[t(`移除 `),i(`code`,null,`as('plugin')`),t(`，改用 `),i(`code`,null,`as('scoped')`)]),i(`li`,null,[t(`移除 Eden Treaty 的根 `),i(`code`,null,`index`)]),i(`li`,null,[t(`从 `),i(`code`,null,`ElysiaAdapter`),t(` 中移除 `),i(`code`,null,`websocket`)]),i(`li`,null,[t(`移除 `),i(`code`,null,`inference.request`)])],-1),i(`h2`,{id:`后记`,tabindex:`-1`},[t(`后记 `),i(`a`,{class:`header-anchor`,href:`#后记`,"aria-label":`Permalink to “后记”`},`​`)],-1),i(`p`,null,`嗨？好久不见。`,-1),i(`p`,null,`生活有时会让人感到困惑，是不是？`,-1),i(`p`,null,`有一天，你在追逐梦想，努力工作。`,-1),i(`p`,null,`转眼间，你回头发现自己已经远超目标。`,-1),i(`p`,null,`有人仰望你，你成了他们的灵感，成为某人的榜样。`,-1),i(`p`,null,`听起来很棒，对吧？`,-1),i(`p`,null,`但我认为我并不是一个好的榜样。`,-1),i(`h3`,{id:`我想过诚实的生活`,tabindex:`-1`},[t(`我想过诚实的生活 `),i(`a`,{class:`header-anchor`,href:`#我想过诚实的生活`,"aria-label":`Permalink to “我想过诚实的生活”`},`​`)],-1),i(`p`,null,`有时，事情只是被夸大了。`,-1),i(`p`,null,`我可能看起来像个能创造任何东西的天才，但我不是。我只是尽我所能。`,-1),i(`p`,null,`我和朋友们一起玩电子游戏，听奇怪的歌曲，看电影，甚至在动漫展上与他们见面。`,-1),i(`p`,null,`就像一个普通人。`,-1),i(`p`,null,[t(`这段时间，我只是紧紧地抱住了 `),i(`em`,null,`你的`),t(` 手臂。`)],-1),i(`p`,null,[i(`strong`,null,`我和你一样，没有特别之处。`)],-1),i(`p`,null,`我尽我所能，但我偶尔也会表现得像个傻瓜。`,-1),i(`p`,null,`即使我觉得自己没有任何可以成为榜样的特质，我仍想告诉你，我心怀感激。`,-1),i(`p`,null,`我的无聊和略显孤独的生活，请不要美化它太多。`,-1),i(`p`,null,[i(`small`,null,[i(`em`,null,`~ 我很高兴你也坏坏的。`)])],-1)]),_:1,__:[0]})]))}});export{l as __pageData,u as default};